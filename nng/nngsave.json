{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,\r\n"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\r\nrw add_zero,\r\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw add_succ,\r\nrw add_succ,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrw add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\r\nrw add_zero,\r\nrw zero_add,\r\nrefl,\r\nrw add_succ,\r\nrw succ_add,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw add_succ,\r\nrw add_zero,\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "induction a with d hd,\r\nrw zero_add,\r\nrw zero_add,\r\nrw add_comm,\r\nrefl,\r\nrw succ_add,\r\nrw succ_add,\r\nrw succ_add,\r\nrw succ_add,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with d hd,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw hd,\r\nrw add_zero,\r\nrefl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw mul_succ,\r\nrw mul_zero,\r\nrw zero_add,\r\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\ninduction m with a hd,\r\nrw mul_zero,\r\nrefl,\r\nrw succ_eq_add_one 0,\r\nrw zero_add,\r\nrw mul_succ,\r\nrw one_eq_succ_zero,\r\nrw hd,\r\nrw add_succ,\r\nrw add_zero, \r\nrefl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with x hd,\r\nrw add_zero,\r\nrw mul_zero,\r\nrefl,\r\nrw add_succ,\r\nrw mul_succ,\r\nrw mul_succ,\r\nrw hd,\r\nrw add_assoc,\r\nrefl,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw hd,\r\nrw mul_succ,\r\nrw mul_add,\r\nrefl,\r\n\r\n"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with x hd,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw add_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw hd,\r\nrw add_succ,\r\nrw mul_succ,\r\nrw add_succ,\r\nrw add_right_comm,\r\nrefl,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction a with x hd,\r\nrw zero_add,\r\nrw zero_mul,\r\nrw zero_add,\r\nrefl,\r\nrw succ_add,\r\nrw succ_mul,\r\nrw succ_mul,\r\nrw hd,\r\nrw add_right_comm,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction a with x mc,\r\nrw zero_mul,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw succ_mul,\r\nrw mc,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "rw mul_comm,\r\nrw mul_assoc,\r\nrw mul_comm a c,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero,\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\r\nrw mul_zero,\r\nrefl,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrw one_mul,\r\nrefl,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with x op,\r\nrw pow_zero,\r\nrefl,\r\nrw pow_succ,\r\nrw op,\r\nrw mul_one,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction m with a pa,\r\nrw zero_add,\r\nrw pow_zero,\r\nrw one_mul,\r\nrefl,\r\nrw succ_add,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pa,\r\nrw mul_comm,\r\nrw mul_left_comm,\r\nrw mul_assoc,\r\nrefl,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with z mp,\r\nrepeat{rw pow_zero},\r\nrw mul_one,\r\nrefl,\r\nrepeat{rw pow_succ},\r\nrw mp,\r\nrw mul_assoc (a ^ z) a (b ^ z * b),\r\nrw mul_left_comm a (b^z) b,\r\nrw mul_assoc (a ^ z) (b ^ z) (a * b),\r\nrefl,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with z pp,\r\nrw mul_zero,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrefl,\r\nrw pow_succ,\r\nrw mul_succ,\r\nrw pow_add,\r\nrw pp,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrepeat{rw pow_one},\r\nrw succ_mul,\r\nrw one_mul,\r\nrw mul_add (a + b) a b,\r\nrepeat{rw add_mul},\r\nrw add_right_comm,\r\nrw add_assoc,\r\nrw add_right_comm (a*a) (b*b) (a * b + a * b),\r\nrw add_assoc (a*a) (a * b + a * b) (b*b),\r\nrw add_right_comm,\r\nrwa mul_comm b a,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 3*(n)+2,\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "exact l(j(h(p))),"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "exact l(j(h(p))),"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro pqr,\r\nintro pq,\r\nintro p,\r\napply pqr,\r\nexact p,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\nintro qf,\r\nintro p,\r\napply qf,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\nintro qE,\r\nintro p,\r\napply qE,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "exact l(j(h(p))),"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "exact l(j(h(p))),"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro pqr,\r\nintro pq,\r\nintro p,\r\napply pqr,\r\nexact p,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\nintro qr,\r\nintro p,\r\napply qr,\r\napply pq,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "repeat {rw not_iff_imp_false},\r\nintro pq,\r\nintro qf,\r\nintro p,\r\napply qf,\r\napply pq,\r\nexact p,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro pEq,\r\ncases pEq with p q,\r\nsplit,\r\nexact q,\r\nexact p,\r\n\r\n"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intro pEq,\r\nintro qEr,\r\ncases pEq with p q,\r\ncases qEr with q r,\r\nsplit,\r\nexact p,\r\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro pEq,\r\nintro qEr,\r\ncases pEq with pq qp,\r\ncases qEr with qr rq,\r\nsplit,\r\nintro p,\r\napply qr,\r\napply pq,\r\nexact p,\r\nintro r,\r\napply qp,\r\napply rq,\r\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro pEq,\r\nintro qEr,\r\ncases pEq with pq qp,\r\ncases qEr with qr rq,\r\nsplit,\r\nintro p,\r\napply qr,\r\napply pq,\r\nexact p,\r\nintro r,\r\napply qp,\r\napply rq,\r\nexact r,"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro pEq,\r\ncases pEq with p q,\r\nright,\r\nexact p,\r\nleft,\r\nexact q,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro pqr,\r\ncases pqr with p qr,\r\ncases qr with q r,\r\nleft,\r\nsplit,\r\nexact p,\r\nexact q,\r\nright,\r\nsplit,\r\nexact p,\r\nexact r,\r\n\r\nintro pqpr,\r\ncases pqpr with pq pr,\r\ncases pq with p q,\r\nsplit,\r\nexact p,\r\nleft,\r\nexact q,\r\ncases pr with p r,\r\nsplit,\r\nexact p,\r\nright,\r\nexact r,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro pnp,\r\ncases pnp with p np,\r\ncontradiction,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nintro p,\r\nrepeat {rw not_iff_imp_false at h},\r\nby_cases p : P; by_cases q : Q,\r\nrepeat {cc},"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "rw succ_inj hs,\r\nrefl,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\r\napply succ_inj,\r\nexact h,\r\n"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro aib,\r\nrw aib,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\napply succ_inj,\r\napply succ_eq_succ_of_eq,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction t with x arc,\r\nexact h,\r\napply arc,\r\nrw add_succ at h,\r\nrw add_succ at h,\r\napply succ_inj,\r\nexact h,\r\n"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction t with x alc,\r\nrw zero_add at h,\r\nrw zero_add at h,\r\nexact h,\r\napply alc,\r\nrw succ_add at h,\r\nrw succ_add at h,\r\napply succ_inj,\r\nexact h,\r\n\r\n"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\napply add_right_cancel,\r\nintro ab,\r\nrw ab,\r\nrefl,"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "induction a with x abi,\r\nintro bz,\r\nrw zero_add at bz,\r\nrw bz,\r\nrefl,\r\nintro sxb,\r\napply abi,\r\nrw succ_eq_add_one at sxb,\r\nrw add_right_comm at sxb,\r\nrw add_right_cancel_iff at sxb,\r\nexact sxb,\r\n "
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "intro succa,\r\ncontradiction,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "induction a with x abi,\r\nrw zero_add at H,\r\nrw H,\r\nrefl,\r\napply abi,\r\nrw succ_add at H,\r\ncontradiction,\r\n "
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "induction b with x abi,\r\nintro az,\r\nrw add_zero at az,\r\nrw az,\r\nrefl,\r\nintro asx,\r\napply abi,\r\nrw add_succ at asx,\r\ncontradiction,\r\n "
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "rw succ_eq_add_one,\r\nrefl,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "induction n with x nnn,\r\nexact zero_ne_succ 0,\r\nintro zz,\r\nhave nnn := succ_inj zz,\r\ncontradiction,"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intro az,\r\nintro bz,\r\nintro abz,\r\ninduction b with n hn,\r\ncontradiction,\r\ncases a with m,\r\ncontradiction,\r\nrw succ_mul at abz,\r\nrw add_succ at abz,\r\ncontradiction,\r\n"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with ab,\r\nrw mul_zero at h,\r\nright,\r\nexact h,\r\nrw mul_succ at h,\r\nleft,\r\nexact add_left_eq_zero h,"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split, \r\nintro ab,\r\napply eq_zero_or_eq_zero_of_mul_eq_zero,\r\nexact ab,\r\nintro azbz,\r\ncases a with azbz,\r\nrw zero_mul,\r\nrefl,\r\ncases azbz,\r\nrw azbz_1,\r\nrw zero_mul,\r\nrefl,\r\nrw azbz_1,\r\nrw mul_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd generalizing b,\r\nrw mul_zero,\r\nrw mul_eq_zero_iff,\r\nintro aob,\r\n cases aob,\r\n exfalso,\r\n apply ha,\r\n  exact aob,\r\n  exact aob,\r\n intro aobb,\r\n cases b,\r\n rw mul_zero at aobb,\r\n symmetry at aobb,\r\n rw mul_eq_zero_iff at aobb,\r\n\r\ncases aobb,\r\nexfalso,\r\napply ha,\r\n exact aobb,\r\nsymmetry,\r\n  exact aobb,\r\nrw succ_eq_succ_iff,\r\nrw mul_succ at aobb,\r\nrw mul_succ at aobb,\r\nrw add_right_cancel_iff at aobb,\r\nhave hdb := hd b,\r\napply hdb,\r\nexact aobb,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add,\r\nuse 1,\r\nrw add_comm,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add,\r\nuse 0,\r\nrw add_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add,\r\nintro amb,\r\ncases amb with c bc,\r\nrw bc,\r\nrw le_iff_exists_add,\r\nuse (succ c),\r\nrw add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add,\r\nuse a,\r\nrw zero_add,\r\nrefl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "cases hab with x xh,\r\ncases hbc with z zh,\r\nuse (z+x),\r\nrw zh,\r\nrw xh,\r\nrw add_assoc,\r\nrw add_comm z x,\r\nrefl,"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with c bac,\r\n have bca : a + c = b,\r\nrw bac,\r\nrefl,\r\ncases hba with d abd,\r\nrw abd at bca,\r\nrw add_assoc at bca,\r\n have dc0 := eq_zero_of_add_right_eq_self bca,\r\n have dz := (add_right_eq_zero) dc0,\r\nrw dz at abd,\r\nrw add_zero at abd,\r\nexact abd,"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases h with b h,\r\nhave rh : a + b = 0,\r\nrw h,\r\n refl,\r\napply add_right_eq_zero rh,"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,\r\nrw hc,\r\nuse c,\r\nrw succ_add,\r\nrefl,"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction b with i hi,\r\nright,\r\nuse a,\r\nrw zero_add,\r\nrefl,\r\ncases hi,\r\nleft,\r\ncases hi with b hb,\r\nrw hb,\r\nuse succ b,\r\nrw add_succ,\r\nrefl,\r\ncases hi with b hb,\r\ncases b,\r\nrw add_zero at hb,\r\nrw hb,\r\nleft,\r\nuse succ 0,\r\nrw add_succ,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ at hb,\r\nrw hb,\r\nright,\r\nuse b,\r\nrw succ_add,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "editorText": "use succ 0,\r\nrefl,"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intro ab,\r\nintro t,\r\ncases ab with c hc,\r\nrw hc,\r\nuse c,\r\nrw add_comm a c,\r\nrw add_assoc,\r\nrw add_comm,\r\nrefl,"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with c hc,\r\nrw  succ_add at hc,\r\nrw  succ_eq_succ_iff at hc,\r\nrw hc,\r\nuse c,\r\nrefl,"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro saa,\r\ncases saa with c saac,\r\nsymmetry at saac,\r\nrw succ_add at saac,\r\nrw succ_eq_add_one at saac,\r\nrw add_assoc at saac,\r\nhave saa' := eq_zero_of_add_right_eq_self saac,\r\ncontradiction,"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,\r\nuse c,\r\nrw hc,\r\nrwa add_assoc,"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro abnba,\r\ncases abnba with ab nba,\r\ncases ab with c bac,\r\ncases c,\r\nrw add_zero at bac,\r\nrw bac at nba,\r\ncontradiction,\r\nrw bac,\r\nuse c,\r\nrw add_succ,\r\nrwa succ_add,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro sab,\r\ncases sab with c bsac,\r\nrw succ_add at bsac,\r\nrw bsac,\r\nsplit,\r\nuse succ c,\r\nrw add_succ,\r\nrefl,\r\nintro saca,\r\nhave q := add_le_add_right saca c,\r\ncases q with d acsaccd,\r\napply not_succ_le_self (a + c),\r\nuse c + d,\r\nrw add_assoc at acsaccd,\r\nexact acsaccd,"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact lt_aux_one a b,\r\nexact lt_aux_two a b,"
    }
  ]
}